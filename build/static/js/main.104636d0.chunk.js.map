{"version":3,"sources":["Autocomplete.js","style1.js","style2.js","App.js","index.js"],"names":["Autocomplete","props","useState","query","setQuery","results","setResults","keyNav","setKeyNav","targetResult","setTargetResult","executeQuery","a","fetch","response","json","resJson","predictions","forEach","prediction","useEffect","style","container","input","value","onChange","e","target","onKeyDown","keyCode","length","name","predictionList","map","result","index","key","focused","onMouseEnter","onMouseLeave","onClick","predictionName","predictionDescription","description","display","flexDirection","alignItems","marginTop","width","border","borderRadius","padding","outline","listStyleType","margin","minWidth","borderBottom","cursor","fontSize","color","background","marginLeft","App","style1","style2","ReactDOM","render","document","getElementById"],"mappings":"g0BAsEeA,EApEM,SAACC,GAAW,IAAD,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,OAEAF,mBAAS,IAFT,mBAEvBG,EAFuB,KAEdC,EAFc,OAGFJ,oBAAU,GAHR,mBAGvBK,EAHuB,KAGfC,EAHe,OAIUN,mBAAS,IAJnB,mBAIvBO,EAJuB,KAITC,EAJS,KA2BxBC,EAAY,uCAAG,8BAAAC,EAAA,sEACEC,MAAM,wDAAD,OAAyDV,IADhE,cACfW,EADe,gBAECA,EAASC,OAFV,QAEfC,EAFe,QAGXC,YAAYC,SAAQ,SAAAC,GAC1Bb,EAAW,GAAD,mBAAKU,EAAQC,aAAb,CAA0BE,QAJnB,2CAAH,qDAelB,OANAC,qBAAU,WACRd,EAAW,IACXE,GAAW,GACXG,MACC,CAACR,IAGF,yBAAKkB,MAAOpB,EAAMoB,MAAMC,WACtB,2BACED,MAAOpB,EAAMoB,MAAME,MACnBC,MAAOrB,EACPsB,SAzCe,SAACC,GACpBtB,EAASsB,EAAEC,OAAOH,QAyCdI,UAtCgB,SAACF,GAEH,KAAdA,EAAEG,SAAkBtB,EAASF,EAAQyB,OAAS,IAChDpB,EAAgBL,EAAQE,EAAS,IACjCC,EAAUD,EAAS,IAGH,KAAdmB,EAAEG,SAAkBtB,GAAU,IAChCG,EAAgBL,EAAQE,EAAS,IACjCC,EAAUD,EAAS,IAGH,KAAdmB,EAAEG,SAAkBtB,GAAU,GAChCH,EAASK,EAAasB,SA2BtB,wBAAIV,MAAOpB,EAAMoB,MAAMW,gBACpB3B,EAAQ4B,KAAK,SAACC,EAAQC,GAAT,OACZ,wBACEC,IAAKD,EACLd,MAAOd,IAAW4B,EAAX,eAAuBlC,EAAMoB,MAAMF,WAAnC,GAAkDlB,EAAMoB,MAAMgB,SAAWpC,EAAMoB,MAAMF,WAC5FmB,aAAc,WAAQ9B,EAAU2B,GAAQzB,EAAgBwB,IACxDK,aAAc,WAAQ/B,GAAW,GAAIE,EAAgB,KACrD8B,QAAS,kBAAMpC,EAASK,EAAasB,QAErC,uBAAGV,MAAOpB,EAAMoB,MAAMoB,gBAAiBP,EAAOH,MAC9C,uBAAGV,MAAOpB,EAAMoB,MAAMqB,uBAAwBR,EAAOS,oBC9DpDrB,EAAY,CACvBsB,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,UAAW,QAGAxB,EAAQ,CACnByB,MAAO,QACPC,OAAQ,iBACRC,aAAc,MACdC,QAAS,WACTC,QAAS,QAGEpB,EAAiB,CAC5BqB,cAAe,OACfC,OAAQ,EACRH,QAAS,GAGEhC,EAAa,CACxBoC,SAAU,QACVC,aAAc,oBACdC,OAAQ,WAGGhB,EAAiB,CAC5Ba,OAAQ,SAGGZ,EAAwB,CACnCY,OAAQ,QACRI,SAAU,MACVC,MAAO,WAGItB,EAAU,CACrBuB,WAAY,WCtCDtC,EAAY,CACvBsB,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,UAAW,QAGAxB,EAAQ,CACnByB,MAAO,QACPC,OAAQ,OACRO,aAAc,oBACdL,QAAS,MACTC,QAAS,QAGEpB,EAAiB,CAC5BqB,cAAe,OACfC,OAAQ,EACRH,QAAS,EACTF,OAAQ,qBAGG9B,EAAa,CACxBoC,SAAU,QACVE,OAAQ,UACRb,QAAS,OACTE,WAAY,UAGDJ,EAAwB,CACnCmB,WAAY,OACZH,SAAU,OAGCrB,EAAU,CACrBsB,MAAO,UACPD,SAAU,QCjBGI,EAbH,WACV,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACEzC,MAAO0C,IAET,kBAAC,EAAD,CACE1C,MAAO2C,MCRfC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.104636d0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Autocomplete = (props) => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [keyNav, setKeyNav] = useState(-1);\n  const [targetResult, setTargetResult] = useState({});\n\n  const handleChange = (e) => {\n    setQuery(e.target.value);\n  }\n\n  const handleKeyDown = (e) => {\n    // if down key is pressed target the next result in the list\n    if (e.keyCode === 40 && keyNav < results.length - 1) {\n      setTargetResult(results[keyNav + 1]);\n      setKeyNav(keyNav + 1);\n    }\n    // if up key is pressed target the previous result in the list\n    if (e.keyCode === 38 && keyNav > -1) {\n      setTargetResult(results[keyNav - 1]);\n      setKeyNav(keyNav - 1);\n    }\n    // if enter is pressed update the query with the targeted result\n    if (e.keyCode === 13 && keyNav > -1) {\n      setQuery(targetResult.name);\n    }\n  }\n\n  const executeQuery = async () => {\n    let response = await fetch(`https://coding-challenge.echoandapex.com/locations?q=${query}`);\n    let resJson = await response.json();\n    resJson.predictions.forEach(prediction => {\n      setResults([...resJson.predictions, prediction]);\n    });\n  }\n\n  // reset state and perform search whenever the query changes\n  useEffect(() => {\n    setResults([]);\n    setKeyNav(-1);\n    executeQuery();\n  }, [query]);\n\n  return (\n    <div style={props.style.container}>\n      <input\n        style={props.style.input}\n        value={query}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n      <ul style={props.style.predictionList}>\n        {results.map( (result, index) => (\n          <li\n            key={index}\n            style={keyNav === index ? {...props.style.prediction, ...props.style.focused} : props.style.prediction}\n            onMouseEnter={() => { setKeyNav(index); setTargetResult(result); }}\n            onMouseLeave={() => { setKeyNav(-1); setTargetResult({}); }}\n            onClick={() => setQuery(targetResult.name)}\n          >\n            <p style={props.style.predictionName}>{result.name}</p>\n            <p style={props.style.predictionDescription}>{result.description}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Autocomplete;\n","export const container = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  marginTop: '50px'\n};\n\nexport const input = {\n  width: '300px',\n  border: 'solid 1px grey',\n  borderRadius: '5px',\n  padding: '10px 5px',\n  outline: 'none'\n};\n\nexport const predictionList = {\n  listStyleType: 'none',\n  margin: 0,\n  padding: 0\n};\n\nexport const prediction = {\n  minWidth: '300px',\n  borderBottom: 'solid 1px #bfbfbf',\n  cursor: 'pointer'\n};\n\nexport const predictionName = {\n  margin: '3px 0'\n};\n\nexport const predictionDescription = {\n  margin: '3px 0',\n  fontSize: '8pt',\n  color: '#666666'\n};\n\nexport const focused = {\n  background: '#f2f2f2'\n};\n\n","export const container = {\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'center',\r\n  marginTop: '50px'\r\n}\r\n\r\nexport const input = {\r\n  width: '300px',\r\n  border: 'none',\r\n  borderBottom: 'solid 2px #bfbfbf',\r\n  padding: '5px',\r\n  outline: 'none'\r\n}\r\n\r\nexport const predictionList = {\r\n  listStyleType: 'none',\r\n  margin: 0,\r\n  padding: 0,\r\n  border: 'solid 1px #bfbfbf'\r\n}\r\n\r\nexport const prediction = {\r\n  minWidth: '300px',\r\n  cursor: 'pointer',\r\n  display: 'flex',\r\n  alignItems: 'center'\r\n}\r\n\r\nexport const predictionDescription = {\r\n  marginLeft: '10px',\r\n  fontSize: '8pt'\r\n}\r\n\r\nexport const focused = {\r\n  color: '#666666',\r\n  fontSize: '14pt'\r\n}","import React, { Fragment } from 'react';\r\nimport Autocomplete from './Autocomplete';\r\n\r\nimport * as style1 from './style1.js';\r\nimport * as style2 from './style2.js';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Fragment>\r\n      <Autocomplete\r\n        style={style1}\r\n      />\r\n      <Autocomplete\r\n        style={style2}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}